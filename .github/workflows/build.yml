name: Build

on:
  workflow_call:
    inputs:
      build-type:
        description: 'What build type to use (e.g. RelWithDebInfo, Release)'
        type: string
        default: 'RelWithDebInfo'
      devel:
        description: 'Development mode (disables update checker, adds nightly qualifier)'
        type: boolean
        default: true
      webengine:
        description: 'Use QtWebEngine. Increases build size by 60-90MB.'
        type: boolean
        default: false
      multimedia:
        description: 'Use QtMultimedia. Increases build size by 20MB.'
        type: boolean
        default: false
      build-id:
        description: 'Identifier for workflows and caching'
        type: string
        default: 'master'
  workflow_dispatch:

jobs:
  source:
    name: "Source Pack"
    runs-on: ubuntu-latest
    container: ghcr.io/pkgforge-dev/archlinux:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          ./.ci/deps/linux.sh

      - name: Parse Forgejo payload
        uses: ./.github/workflows/parse
        with:
          build-id: ${{ inputs.build-id }}
      
      - name: Create job summary
        run: ./.ci/summary.sh ${{ inputs.build-id }}

      - name: Clone
        shell: bash
        run: ./.ci/clone.sh true

      - name: Configure
        run: |
          cd eden
          cmake -S . -B build \
            -DUSE_DISCORD_PRESENCE=ON \
            -DYUZU_USE_BUNDLED_VCPKG=OFF \
            -DYUZU_USE_BUNDLED_QT=OFF \
            -DYUZU_USE_BUNDLED_SDL2=OFF \
            -DYUZU_USE_EXTERNAL_SDL2=ON \
            -DYUZU_USE_BUNDLED_FFMPEG=ON \
            -DYUZU_TESTS=OFF \
            -DYUZU_USE_QT_MULTIMEDIA=OFF \
            -DYUZU_USE_QT_WEB_ENGINE=OFF

      - name: Pack
        run: |
          export ARCHIVE="git-archive-all-1.23.1"
          wget https://github.com/Kentzo/git-archive-all/releases/download/1.23.1/$ARCHIVE.tar.gz
          tar xf $ARCHIVE.tar.gz

          cd eden
          rm -rf build
          git describe --abbrev=0 --always HEAD > GIT-COMMIT
          git describe --tags HEAD > GIT-TAG || echo 'unknown' > GIT-TAG
          python ../$ARCHIVE/git_archive_all.py --include .cache --include GIT-COMMIT --include GIT-TAG --force-submodules ../source.tar

          cd ..
          zstd -10 source.tar
          rm source.tar
          tar xf source.tar.zst
          zip -r source.zip source
          rm -rf source
          
      - name: Upload source
        uses: actions/upload-artifact@v4.6.2
        with:
          name: source
          path: source.*

  set-matrix:
    name: "Generate Linux matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: |
          BASE='[{"runs-on": "ubuntu-latest", "arch": "amd64"},{"runs-on": "ubuntu-24.04-arm", "arch": "aarch64"},{"runs-on": "ubuntu-latest", "arch": "steamdeck"}'
          
          EXTRA=',{"runs-on": "ubuntu-latest", "arch": "legacy"},{"runs-on": "ubuntu-latest", "arch": "rog-ally"},{"runs-on": "ubuntu-24.04-arm", "arch": "armv9"}'

          if [ "${{ inputs.build-id }}" = "tag" ]; then
            MATRIX="${BASE}${EXTRA}]"
          else
            MATRIX="${BASE}]"
          fi

          echo $MATRIX
          echo "matrix=${MATRIX}" >> $GITHUB_OUTPUT

  linux:
    name: "Linux (${{ matrix.arch }})"
    needs: set-matrix
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.set-matrix.outputs.matrix) }}

    container: ghcr.io/pkgforge-dev/archlinux:latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          ./.ci/deps/linux.sh

      - name: Set build variables
        shell: bash
        run: |
          echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
          echo "DEVEL=${{ inputs.devel }}" >> $GITHUB_ENV
          echo "USE_WEBENGINE=${{ inputs.webengine }}" >> $GITHUB_ENV
          echo "USE_MULTIMEDIA=${{ inputs.multimedia }}" >> $GITHUB_ENV

      - name: Parse Forgejo payload
        uses: ./.github/workflows/parse
        with:
          build-id: ${{ inputs.build-id }}

      - name: Clone
        shell: bash
        run: ./.ci/clone.sh true

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/eden/.cache
          key: ${{ runner.os }}-${{ matrix.arch }}-cpm-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cpm-

      - name: Build
        shell: bash
        run: |
          TARGET=appimage ./.ci/linux/build.sh ${{ matrix.arch }} $(nproc)

      - name: Package
        shell: bash
        run: |
          ./.ci/linux/package.sh ${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: linux-${{ matrix.arch }}
          path: artifacts/*

  windows:
    name: "Windows (${{ matrix.arch }})"
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: windows-latest
            arch: amd64
            qt_arch: win64_msvc2022_64
            qt_version: 6.9.1

          # - runs-on: windows-11-arm
          #   arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_version }}
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          cache: 'true'

      - name: Set build variables
        shell: bash
        run: |
          echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
          echo "DEVEL=${{ inputs.devel }}" >> $GITHUB_ENV
          echo "USE_WEBENGINE=${{ inputs.webengine }}" >> $GITHUB_ENV
          echo "USE_MULTIMEDIA=${{ inputs.multimedia }}" >> $GITHUB_ENV

      - name: Parse Forgejo payload
        uses: ./.github/workflows/parse
        with:
          build-id: ${{ inputs.build-id }}

      - name: Clone
        shell: bash
        run: ./.ci/clone.sh true

      - name: Set up vcpkg cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/eden/build/vcpkg_installed
            ${{ github.workspace }}/eden/build/externals
            ${{ github.workspace }}/eden/.vcpkg
          key: ${{ runner.os }}-${{ matrix.arch }}-vcpkg-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-vcpkg-

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/eden/.cache
          key: ${{ runner.os }}-${{ matrix.arch }}-cpm-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-cpm-

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Install Vulkan SDK
        shell: powershell
        run: |
          ./.ci/windows/install-vulkan-sdk.ps1

      - name: Build
        shell: bash
        run: |
          export PATH="${PATH}:${{ runner.workspace }}/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}/bin"
          export WINDEPLOYQT=windeployqt

          ./.ci/windows/build.sh

      - name: Package
        shell: bash
        run: |
          export ARCH=${{ matrix.arch }}
          ./.ci/windows/package.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: windows-${{ matrix.arch }}
          path: artifacts/*

  android:
    runs-on: ubuntu-latest
    name: "Android"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          ./.ci/deps/android.sh

      - name: Parse Forgejo payload
        uses: ./.github/workflows/parse
        with:
          build-id: ${{ inputs.build-id }}

      - name: Clone
        shell: bash
        run: ./.ci/clone.sh true

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/eden/.cache
          key: ${{ runner.os }}-cpm-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Build
        run: |
          JAVA_HOME=$JAVA_HOME_17_X64 DEVEL=true ./.ci/android/build.sh
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}

      - name: Package
        run: |
          ./.ci/android/package.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: android
          path: artifacts/*.apk

  macos:
    runs-on: macos-latest
    name: "macOS"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: ./.ci/deps/macos.sh

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.7.3
          cache: 'true'

      - name: Set build variables
        shell: bash
        run: |
          echo "BUILD_TYPE=${{ inputs.build-type }}" >> $GITHUB_ENV
          echo "DEVEL=${{ inputs.devel }}" >> $GITHUB_ENV
          echo "USE_WEBENGINE=${{ inputs.webengine }}" >> $GITHUB_ENV
          echo "USE_MULTIMEDIA=${{ inputs.multimedia }}" >> $GITHUB_ENV

      - name: Parse Forgejo payload
        uses: ./.github/workflows/parse
        with:
          build-id: ${{ inputs.build-id }}

      - name: Clone
        shell: bash
        run: ./.ci/clone.sh true

      - name: Set up CPM cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/eden/.cache
          key: ${{ runner.os }}-cpm-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-cpm-

      - name: Build
        run: |
          ./.ci/macos/build.sh

      - name: Package
        run: |
          ./.ci/macos/package.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: macos
          path: artifacts/*
